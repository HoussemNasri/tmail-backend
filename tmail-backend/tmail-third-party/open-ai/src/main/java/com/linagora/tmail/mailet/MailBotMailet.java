package com.linagora.tmail.mailet;

import java.io.IOException;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import jakarta.inject.Inject;
import jakarta.mail.Address;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;

import org.apache.james.core.MailAddress;
import org.apache.james.core.MaybeSender;
import org.apache.james.mime4j.codec.DecodeMonitor;
import org.apache.james.mime4j.message.DefaultMessageBuilder;
import org.apache.james.mime4j.stream.MimeConfig;
import org.apache.james.server.core.MimeMessageInputStream;
import org.apache.james.util.html.HtmlTextExtractor;
import org.apache.james.util.mime.MessageContentExtractor;
import org.apache.mailet.Mail;
import org.apache.mailet.MailetException;
import org.apache.mailet.base.GenericMailet;

import com.github.fge.lambdas.Throwing;
import com.google.common.base.Strings;

import dev.langchain4j.data.message.ChatMessage;
import dev.langchain4j.data.message.SystemMessage;
import dev.langchain4j.data.message.UserMessage;
import dev.langchain4j.model.chat.ChatLanguageModel;

/**
 * MailBotMailet is a mailet designed to automatically reply to emails
 * sent to a specific recipient (e.g., gpt@linagora.com). It uses the OpenAI
 * API to generate responses.
 *
 * <p>
 * Configuration example:
 *
 * <pre>
 * {@code
 * <mailet match="com.linagora.tmail.mailet.RecipientsContain=gpt@linagora.com" class="com.linagora.tmail.mailet.MailBotMailet">
 *     <apiKey>demo</apiKey>
 *     <gptAddress>gpt@tmail.com</gptAddress>
 *     <model>gpt-4o-mini</model>
 * </mailet>
 * }
 * </pre>
 * </p>
 *
 * <p>
 * The mailet configuration should include the following parameters:
 * </p>
 * <ul>
 * <li><b>apiKey</b>: The API key for accessing the OpenAI service.</li>
 * <li><b>gptAddress</b>: The email address used to send replies generated by the OpenAI model.</li>
 * <li><b>model</b>: The OpenAI model to be used. Optional. Defaults to <b>gpt-3.5-turbo</b> by langchain4j. You can use the <b>gpt-4o-mini</b> model and <b>demo</b> API key for testing purpose.</li>
 * </ul>
 */
public class MailBotMailet extends GenericMailet {
    private final HtmlTextExtractor htmlTextExtractor;
    private DefaultMessageBuilder defaultMessageBuilder;
    private MailBotConfig config;
    private ChatLanguageModel chatLanguageModel;
    private final ChatLanguageModelFactory chatLanguageModelFactory;

    @Inject
    public MailBotMailet(ChatLanguageModelFactory chatLanguageModelFactory, HtmlTextExtractor htmlTextExtractor) {
        this.chatLanguageModelFactory = chatLanguageModelFactory;
        this.htmlTextExtractor = htmlTextExtractor;
    }

    @Override
    public void service(Mail mail) {
        if (gptLoopDetected(mail)) {
            return;
        }

        try {
            String gptAnswer = askChatLanguageModel(mail);
            MimeMessage replyMimeMessage = evaluateReplyMimeMessage(mail, gptAnswer);

            getMailetContext()
                .sendMail(config.getGptAddress(), evaluateRecipients(mail), replyMimeMessage);
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    private boolean gptLoopDetected(Mail mail) {
        return mail.getMaybeSender().equals(MaybeSender.of(config.getGptAddress()));
    }

    private String askChatLanguageModel(Mail mail) throws IOException, MessagingException {
        ChatMessage systemMessage = new SystemMessage("You are a helpful mailing chatbot. Respond to the following email as a chatbot, not as the recipient. ");
        ChatMessage userMessage = new UserMessage(evaluatePrompt(mail));

        return chatLanguageModel.generate(systemMessage, userMessage)
            .content()
            .text();
    }

    private String evaluatePrompt(Mail mail) throws IOException, MessagingException {
        MessageContentExtractor.MessageContent askingMessageContent = extractMessageContent(mail);
        Optional<String> content = askingMessageContent.extractMainTextContent(htmlTextExtractor);

        return Strings.nullToEmpty(mail.getMessage().getSubject()) + "\n" +
            content.orElse("");
    }

    private MessageContentExtractor.MessageContent extractMessageContent(Mail mail) throws IOException, MessagingException {
        return new MessageContentExtractor().extract(defaultMessageBuilder.parseMessage(new MimeMessageInputStream(mail.getMessage())));
    }

    private MimeMessage evaluateReplyMimeMessage(Mail mail, String answer) throws MessagingException {
        MimeMessage reply = (MimeMessage) mail.getMessage()
            .reply(true);

        stripGptFromRecipients(reply, Message.RecipientType.TO);
        stripGptFromRecipients(reply, Message.RecipientType.CC);
        stripGptFromRecipients(reply, Message.RecipientType.BCC);

        reply.setSentDate(new Date());
        reply.setFrom(config.getGptAddress().asString());
        reply.setText(answer);

        return reply;
    }

    private void stripGptFromRecipients(MimeMessage reply, Message.RecipientType recipientType) throws MessagingException {
        Address[] toAddresses = Arrays.stream(Optional.ofNullable(reply.getRecipients(recipientType))
                .orElse(new InternetAddress[0]))
            .filter(Throwing.predicate(address -> !address.equals(new InternetAddress(config.getGptAddress().asString()))))
            .toArray(Address[]::new);
        reply.setRecipients(recipientType, toAddresses);
    }

    private List<MailAddress> evaluateRecipients(Mail mail) {
        return Stream.of(mail.getMaybeSender().asList(), mail.getRecipients())
            .flatMap(Collection::stream)
            .filter(recipient -> !recipient.equals(config.getGptAddress()))
            .toList();
    }

    @Override
    public void init() throws MailetException {
        this.config = MailBotConfig.fromMailetConfig(getMailetConfig());
        this.chatLanguageModel = createChatLanguageModelModel(config);

        this.defaultMessageBuilder = new DefaultMessageBuilder();
        defaultMessageBuilder.setMimeEntityConfig(MimeConfig.PERMISSIVE);
        defaultMessageBuilder.setDecodeMonitor(DecodeMonitor.SILENT);
    }

    private ChatLanguageModel createChatLanguageModelModel(MailBotConfig mailBotConfig) {
        return chatLanguageModelFactory.createChatLanguageModel(mailBotConfig);
    }

    @Override
    public String getMailetName() {
        return "MailBotMailet";
    }
}
